<?php

/**
 * Class ProcessImageMinimize
 *
 * @property MinimizeApiConnector $api
 */
class ProcessImageMinimize extends WireData implements Module, ConfigurableModule {

    private $api;

    const statusInit = 0;
    const statusPushed = 1;
    const statusProcessedSuccess = 2;
    const statusProcessedError = 3;
    const statusDone = 4;

    public static function getModuleInfo() {
        return array(
            'title' => 'minimize.pw',
            'author' => 'Conclurer GbR',
            'version' => 150
        );
    }

    public function init() {
        $this->api = new MinimizeApiConnector($this->licenseKey); #todo
    }

    /**
     * Return an InputfieldsWrapper of Inputfields used to configure the class
     *
     * @param array $data Array of config values indexed by field name
     * @return InputfieldsWrapper
     *
     */
    public static function getModuleConfigInputfields(array $data)
    {
        // TODO: Implement getModuleConfigInputfields() method.
    }


    public function pushToLocalQueue ($imgPath) {
        // Check if image is already in queue
        $object = MinimizeQueueObject::getByPath($imgPath);
        if ($object->exists()) return false;

        $pushObject = new MinimizeQueueObject();
        $pushObject->status = ProcessImageMinimize::statusInit;
        $pushObject->path = $imgPath;
        $pushObject->save();

        return true;
    }

    protected function pushToMinimizePw () {
        // Get all Images with StatusInit
        $objects = MinimizeQueueObject::findByStatus(ProcessImageMinimize::statusInit);
        $imageUrls = array();
        $pictures = array();

        foreach ($objects as $object) {
            $imageUrls[] = $object->url();
            $pictures[$object->url()] = $object;
        }

        $response = $this->api->pushToMinimize($imageUrls);
        if ($response['error']) return;

        foreach ($response['items'] as $item) {
            if ($item['added']) {
                $object = $pictures[$item['reference']];
                if (empty($item['reference'])) continue;

                $object->reference = $item['reference'];
                $object->state = ProcessImageMinimize::statusPushed;
                $object->createStatusFlagFile(MinimizeQueueObject::StatusProcessing);
                $object->save();
            }
            else {
                if ($item['message'] == 'No credits left') {
                    #todo no credits left
                    return;
                }
            }
        }
    }

    public function getStatusFromMinimizePw () {
        // Get all Images with StatusPushed
        $objects = MinimizeQueueObject::findByStatus(ProcessImageMinimize::statusPushed);
        $i = 0;
        $references = array();
        foreach ($objects as $object) {
            $references[$object->reference] = $object;
            $i++;
            if ($i >= 50) break;
        }

        if (count($references) > 0) {
            $response = $this->api->getStatusFromMinimize(array_keys($references));
            if (!$response['error']) {
                foreach ($response as $item) {
                    $reference = $item['reference'];
                    if ($item['valid']) {
                        switch ($item['state']) {
                            case 0:
                            case 1:
                                continue;

                            case 2:
                                // Processing finished
                                $object = $references[$reference];
                                $object->state = ProcessImageMinimize::statusProcessedSuccess;
                                $object->processResponse = $item['processed'];
                                $object->save();
                                break;

                            default:
                                // Processing aborted due to error
                                $object = $references[$reference];
                                $object->state = ProcessImageMinimize::statusProcessedError;
                                $object->processResponse = $item['message'];
                                break;

                        }
                    }
                    else {
                        // Record not found on server, retry
                        $object = $references[$reference];
                        $object->delete();
                        $this->pushToLocalQueue($object->path);
                    }
                }
            }
        }
    }
}